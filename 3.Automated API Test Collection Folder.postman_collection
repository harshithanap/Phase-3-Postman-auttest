{
	"info": {
		"_postman_id": "fc3b9aa0-5d57-4bd7-afcd-46cb1ead102d",
		"name": "3.Automated API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32340362",
		"_collection_link": "https://api-aut-test-636814.postman.co/workspace/API-Automation-Test~751694b3-ac5c-44f4-bb90-f4cb9e4b7c5c/collection/32340362-fc3b9aa0-5d57-4bd7-afcd-46cb1ead102d?action=share&source=collection_link&creator=32340362"
	},
	"item": [
		{
			"name": "Read Operations",
			"item": [
				{
					"name": "Get All User Request 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Repose body should be JSON\", function () {\r",
									"    pm.expect(jsonData.page).to.eql(1);\r",
									"});    \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Repose body should be JSON\", function () {\r",
									"    pm.expect(jsonData.per_page).to.eql(6);\r",
									"   \r",
									"\r",
									"});  \r",
									"pm.test(\"Repose body should be JSON\", function () {\r",
									"    pm.expect(jsonData.total).to.eql(12);\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Repose body should be JSON\", function () {\r",
									"    pm.expect(jsonData.total_page).to.eql(2);  \r",
									"});    \r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/users?page={{PAGEC}}&size={{SIZEC}}&sort=acs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "{{PAGEC}}"
								},
								{
									"key": "size",
									"value": "{{SIZEC}}"
								},
								{
									"key": "sort",
									"value": "acs"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 Successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response should be a JSON\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(12);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response should be a JSON and dynamic properties\", function () {\r",
									"    // check the properties exist\r",
									"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"first_name\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"last_name\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"avatar\");\r",
									"\r",
									" // check the properties exist & not null\r",
									"    pm.expect(jsonData.data.id).to.not.be.null;\r",
									"    pm.expect(jsonData.data.id).to.not.be.undefined;\r",
									"\r",
									" // check the properties exist & not undefined\r",
									"    pm.expect(jsonData.data.email).to.not.be.null;\r",
									"    pm.expect(jsonData.data.email).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response should be a JSON and not null & not undefined properties\", function () {\r",
									"\r",
									"    // check the properties exist & not null\r",
									"    pm.expect(jsonData.data.id).to.not.be.null;\r",
									"    pm.expect(jsonData.data.id).to.not.be.undefined;\r",
									"\r",
									" // check the properties exist & not undefined\r",
									"    pm.expect(jsonData.data.email).to.not.be.null;\r",
									"    pm.expect(jsonData.data.email).to.not.be.undefined;\r",
									"\r",
									"// check the properties exist & not undefined\r",
									"    pm.expect(jsonData.data.first_name).to.not.be.null;\r",
									"    pm.expect(jsonData.data.first_name).to.not.be.undefined;\r",
									"\r",
									"// check the properties exist & not undefined\r",
									"    pm.expect(jsonData.data.last_name).to.not.be.null;\r",
									"    pm.expect(jsonData.data.last_name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/users/12",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"12"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"userId\", \"actdq31w4362rcdv\");",
							"pm.collectionVariables.set(\"username\", \"john smith\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"validate Collection varaibles\", function(){",
							"",
							"   var userId = pm.collectionVariables.get(\"userId\");",
							"   var username = pm.collectionVariables.get(\"username\");",
							"  ",
							"   ",
							"   console.log(userId,username);",
							"});",
							""
						]
					}
				}
			]
		},
		{
			"name": "Write Operations",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"pm.environment.set(\"variable_key\", \"variable_value\");\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response should be a JSON\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Morpheus Smith\");\r",
									"    pm.expect(jsonData.job).to.eql(\"Matrix Leader\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response should be a JSON\", function () {\r",
									"    // check the properties exist\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									" // check the properties exist & not null\r",
									"    pm.expect(jsonData.id).to.not.be.null;\r",
									"    pm.expect(jsonData.id).to.not.be.undefined;\r",
									" // check the properties exist & not undefined\r",
									"    pm.expect(jsonData.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.createdAt).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Morpheus Smith\",\r\n    \"job\": \"Matrix Leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/users",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a user by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response should be a JSON\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Morpheus Smith\");\r",
									"    pm.expect(jsonData.job).to.eql(\"Matrix Leader\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response should be a JSON\", function () {\r",
									"    // check the properties exist\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"\r",
									" // check the properties exist & not null\r",
									"    pm.expect(jsonData.name).to.not.be.null;\r",
									"    pm.expect(jsonData.name).to.not.be.undefined;\r",
									" // check the properties exist & not undefined\r",
									"    pm.expect(jsonData.updatedAt).to.not.be.null;\r",
									"    pm.expect(jsonData.updatedAt).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include('application/json');\r",
									"});\r",
									"\r",
									"//pm.test(\"Cookie isLoggedIn is present\",function () {\r",
									" \r",
									"  //pm.expect(pm.cookies.has('isLoggedIn')).to.be.true;\r",
									"//});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Morpheus Smith\",\r\n    \"job\": \"Matrix Leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/users/2",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user by userId Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204: Delete has no content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//var jsonData = pm.response;\r",
									"//pm.test(\"Response should be empty\", function () {\r",
									"    //pm.expect( pm.response).to.be.empty;\r",
									"//});\r",
									"pm.variables.get(\"variable_key\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/users/3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"validate Collection varaibles\", function(){",
					"",
					"   var host_url = pm.collectionVariables.get(\"URL\");",
					"   var host_page = pm.collectionVariables.get(\"PAGEC\");",
					"   var host_size = pm.collectionVariables.get(\"SIZEC\");",
					"   ",
					"   console.log(host_url,page,size)",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "https://reqres.in/api",
			"type": "string"
		},
		{
			"key": "PAGEC",
			"value": "0",
			"type": "string"
		},
		{
			"key": "SIZEC",
			"value": "10",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		}
	]
}